INCLUDE: #include
LESS: <
NAME: iostream
GREATER: >
NAME: void
NAME: computeLPSArray
L_BRACKET: (
NAME: const
NAME: char
MULTIPLY: *
NAME: pattern
COMMA: ,
NAME: int
NAME: M
COMMA: ,
NAME: int
MULTIPLY: *
NAME: lps
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: length
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: lps
L_SQUARE_BRACKET: [
INT: 0
R_SQUARE_BRACKET: ]
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: int
NAME: i
ASSIGN: =
INT: 1
SEMICOLON: ;
NAME: while
L_BRACKET: (
NAME: i
LESS: <
NAME: M
R_BRACKET: )
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: pattern
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
EQUAL: ==
NAME: pattern
L_SQUARE_BRACKET: [
NAME: length
R_SQUARE_BRACKET: ]
R_BRACKET: )
L_BRACE: {
NAME: length
DOUBLE_PLUS: ++
SEMICOLON: ;
NAME: lps
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: length
SEMICOLON: ;
NAME: i
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
NAME: else
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: length
NOT_EQUAL: !=
INT: 0
R_BRACKET: )
L_BRACE: {
NAME: length
ASSIGN: =
NAME: lps
L_SQUARE_BRACKET: [
NAME: length
MINUS: -
INT: 1
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
NAME: else
L_BRACE: {
NAME: lps
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: i
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
R_BRACE: }
R_BRACE: }
NAME: void
NAME: KMPSearch
L_BRACKET: (
NAME: const
NAME: char
MULTIPLY: *
NAME: pattern
COMMA: ,
NAME: const
NAME: char
MULTIPLY: *
NAME: text
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: M
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: int
NAME: N
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: while
L_BRACKET: (
NAME: pattern
L_SQUARE_BRACKET: [
NAME: M
R_SQUARE_BRACKET: ]
NOT_EQUAL: !=
CHAR: '\0'
R_BRACKET: )
L_BRACE: {
NAME: M
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
NAME: while
L_BRACKET: (
NAME: text
L_SQUARE_BRACKET: [
NAME: N
R_SQUARE_BRACKET: ]
NOT_EQUAL: !=
CHAR: '\0'
R_BRACKET: )
L_BRACE: {
NAME: N
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
NAME: int
MULTIPLY: *
NAME: lps
ASSIGN: =
NAME: new
NAME: int
L_SQUARE_BRACKET: [
NAME: M
R_SQUARE_BRACKET: ]
SEMICOLON: ;
NAME: computeLPSArray
L_BRACKET: (
NAME: pattern
COMMA: ,
NAME: M
COMMA: ,
NAME: lps
R_BRACKET: )
SEMICOLON: ;
NAME: int
NAME: i
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: int
NAME: j
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: while
L_BRACKET: (
NAME: i
LESS: <
NAME: N
R_BRACKET: )
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: pattern
L_SQUARE_BRACKET: [
NAME: j
R_SQUARE_BRACKET: ]
EQUAL: ==
NAME: text
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
R_BRACKET: )
L_BRACE: {
NAME: j
DOUBLE_PLUS: ++
SEMICOLON: ;
NAME: i
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
NAME: if
L_BRACKET: (
NAME: j
EQUAL: ==
NAME: M
R_BRACKET: )
L_BRACE: {
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "Found pattern at index "
SHIFT_LEFT: <<
NAME: i
MINUS: -
NAME: j
SHIFT_LEFT: <<
NAME: std
DOUBLE_COLON: ::
NAME: endl
SEMICOLON: ;
NAME: j
ASSIGN: =
NAME: lps
L_SQUARE_BRACKET: [
NAME: j
MINUS: -
INT: 1
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
NAME: else
NAME: if
L_BRACKET: (
NAME: i
LESS: <
NAME: N
DOUBLE_AND: &&
NAME: pattern
L_SQUARE_BRACKET: [
NAME: j
R_SQUARE_BRACKET: ]
NOT_EQUAL: !=
NAME: text
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
R_BRACKET: )
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: j
NOT_EQUAL: !=
INT: 0
R_BRACKET: )
L_BRACE: {
NAME: j
ASSIGN: =
NAME: lps
L_SQUARE_BRACKET: [
NAME: j
MINUS: -
INT: 1
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
NAME: else
L_BRACE: {
NAME: i
DOUBLE_PLUS: ++
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
R_BRACE: }
NAME: delete
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
NAME: lps
SEMICOLON: ;
R_BRACE: }
NAME: int
NAME: main
L_BRACKET: (
R_BRACKET: )
L_BRACE: {
NAME: const
NAME: char
NAME: text
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
ASSIGN: =
STR: "ABABDABACDABABCABAB"
SEMICOLON: ;
NAME: const
NAME: char
NAME: pattern
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
ASSIGN: =
STR: "ABABCABAB"
SEMICOLON: ;
NAME: KMPSearch
L_BRACKET: (
NAME: pattern
COMMA: ,
NAME: text
R_BRACKET: )
SEMICOLON: ;
NAME: return
INT: 0
SEMICOLON: ;
R_BRACE: }
