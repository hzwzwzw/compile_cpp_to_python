INCLUDE: #include
LESS: <
NAME: iostream
GREATER: >
INCLUDE: #include
LESS: <
NAME: cstring
GREATER: >
TYPE_BOOL: bool
NAME: isPalindrome
L_BRACKET: (
CONSTANT: const
TYPE_CHAR: char
NAME: input
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
R_BRACKET: )
L_BRACE: {
TYPE_INT: int
NAME: length
ASSIGN: =
NAME: strlen
L_BRACKET: (
NAME: input
R_BRACKET: )
SEMICOLON: ;
FOR: for
L_BRACKET: (
TYPE_INT: int
NAME: i
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: i
LESS: <
NAME: length
DIVIDE: /
INT: 2
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: i
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: input
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
NOT_EQUAL: !=
NAME: input
L_SQUARE_BRACKET: [
NAME: length
MINUS: -
NAME: i
MINUS: -
INT: 1
R_SQUARE_BRACKET: ]
R_BRACKET: )
L_BRACE: {
RETURN: return
BOOL: false
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
RETURN: return
BOOL: true
SEMICOLON: ;
R_BRACE: }
TYPE_INT: int
NAME: main
L_BRACKET: (
R_BRACKET: )
L_BRACE: {
TYPE_CHAR: char
NAME: input
L_SQUARE_BRACKET: [
INT: 100
R_SQUARE_BRACKET: ]
SEMICOLON: ;
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "Enter a string: "
SEMICOLON: ;
NAME: std
DOUBLE_COLON: ::
NAME: cin
DOT: .
NAME: getline
L_BRACKET: (
NAME: input
COMMA: ,
INT: 100
R_BRACKET: )
SEMICOLON: ;
IF: if
L_BRACKET: (
NAME: isPalindrome
L_BRACKET: (
NAME: input
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "True"
SHIFT_LEFT: <<
NAME: std
DOUBLE_COLON: ::
NAME: endl
SEMICOLON: ;
R_BRACE: }
ELSE: else
L_BRACE: {
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "False"
SHIFT_LEFT: <<
NAME: std
DOUBLE_COLON: ::
NAME: endl
SEMICOLON: ;
R_BRACE: }
RETURN: return
INT: 0
SEMICOLON: ;
R_BRACE: }
