INCLUDE: #include
LESS: <
NAME: iostream
GREATER: >
INCLUDE: #include
LESS: <
NAME: cctype
GREATER: >
INCLUDE: #include
LESS: <
NAME: cstdlib
GREATER: >
INCLUDE: #include
LESS: <
NAME: cstring
GREATER: >
CONSTANT: const
TYPE_INT: int
NAME: MAX
ASSIGN: =
INT: 100
SEMICOLON: ;
CLASS: class
NAME: CharStack
L_BRACE: {
PERMISSON_PUBLIC: public
COLON: :
TYPE_CHAR: char
NAME: data
L_SQUARE_BRACKET: [
NAME: MAX
R_SQUARE_BRACKET: ]
SEMICOLON: ;
TYPE_INT: int
NAME: top
SEMICOLON: ;
R_BRACE: }
SEMICOLON: ;
NAME: struct
NAME: IntStack
L_BRACE: {
TYPE_INT: int
NAME: data
L_SQUARE_BRACKET: [
NAME: MAX
R_SQUARE_BRACKET: ]
SEMICOLON: ;
TYPE_INT: int
NAME: top
SEMICOLON: ;
R_BRACE: }
SEMICOLON: ;
TYPE_VOID: void
NAME: initCharStack
L_BRACKET: (
NAME: CharStack
AND: &
NAME: stack
R_BRACKET: )
L_BRACE: {
NAME: stack
DOT: .
NAME: top
ASSIGN: =
MINUS: -
INT: 1
SEMICOLON: ;
R_BRACE: }
TYPE_VOID: void
NAME: initIntStack
L_BRACKET: (
NAME: IntStack
AND: &
NAME: stack
R_BRACKET: )
L_BRACE: {
NAME: stack
DOT: .
NAME: top
ASSIGN: =
MINUS: -
INT: 1
SEMICOLON: ;
R_BRACE: }
TYPE_VOID: void
NAME: pushChar
L_BRACKET: (
NAME: CharStack
AND: &
NAME: stack
COMMA: ,
TYPE_CHAR: char
NAME: c
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: stack
DOT: .
NAME: top
LESS: <
NAME: MAX
MINUS: -
INT: 1
R_BRACKET: )
L_BRACE: {
NAME: stack
DOT: .
NAME: data
L_SQUARE_BRACKET: [
DOUBLE_PLUS: ++
NAME: stack
DOT: .
NAME: top
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: c
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
TYPE_VOID: void
NAME: pushInt
L_BRACKET: (
NAME: IntStack
AND: &
NAME: stack
COMMA: ,
TYPE_INT: int
NAME: value
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: stack
DOT: .
NAME: top
LESS: <
NAME: MAX
MINUS: -
INT: 1
R_BRACKET: )
L_BRACE: {
NAME: stack
DOT: .
NAME: data
L_SQUARE_BRACKET: [
DOUBLE_PLUS: ++
NAME: stack
DOT: .
NAME: top
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: value
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
TYPE_CHAR: char
NAME: popChar
L_BRACKET: (
NAME: CharStack
AND: &
NAME: stack
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: stack
DOT: .
NAME: top
GEQ: >=
INT: 0
R_BRACKET: )
L_BRACE: {
RETURN: return
NAME: stack
DOT: .
NAME: data
L_SQUARE_BRACKET: [
NAME: stack
DOT: .
NAME: top
DOUBLE_MINUS: --
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
RETURN: return
CHAR: '\0'
SEMICOLON: ;
R_BRACE: }
TYPE_INT: int
NAME: popInt
L_BRACKET: (
NAME: IntStack
AND: &
NAME: stack
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: stack
DOT: .
NAME: top
GEQ: >=
INT: 0
R_BRACKET: )
L_BRACE: {
RETURN: return
NAME: stack
DOT: .
NAME: data
L_SQUARE_BRACKET: [
NAME: stack
DOT: .
NAME: top
DOUBLE_MINUS: --
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
RETURN: return
INT: 0
SEMICOLON: ;
R_BRACE: }
TYPE_CHAR: char
NAME: peekChar
L_BRACKET: (
NAME: CharStack
AND: &
NAME: stack
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: stack
DOT: .
NAME: top
GEQ: >=
INT: 0
R_BRACKET: )
L_BRACE: {
RETURN: return
NAME: stack
DOT: .
NAME: data
L_SQUARE_BRACKET: [
NAME: stack
DOT: .
NAME: top
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
RETURN: return
CHAR: '\0'
SEMICOLON: ;
R_BRACE: }
TYPE_BOOL: bool
NAME: isOperator
L_BRACKET: (
TYPE_CHAR: char
NAME: c
R_BRACKET: )
L_BRACE: {
RETURN: return
NAME: c
EQUAL: ==
CHAR: '+'
DOUBLE_OR: ||
NAME: c
EQUAL: ==
CHAR: '-'
DOUBLE_OR: ||
NAME: c
EQUAL: ==
CHAR: '*'
DOUBLE_OR: ||
NAME: c
EQUAL: ==
CHAR: '/'
SEMICOLON: ;
R_BRACE: }
TYPE_INT: int
NAME: precedence
L_BRACKET: (
TYPE_CHAR: char
NAME: op
R_BRACKET: )
L_BRACE: {
IF: if
L_BRACKET: (
NAME: op
EQUAL: ==
CHAR: '+'
DOUBLE_OR: ||
NAME: op
EQUAL: ==
CHAR: '-'
R_BRACKET: )
RETURN: return
INT: 1
SEMICOLON: ;
IF: if
L_BRACKET: (
NAME: op
EQUAL: ==
CHAR: '*'
DOUBLE_OR: ||
NAME: op
EQUAL: ==
CHAR: '/'
R_BRACKET: )
RETURN: return
INT: 2
SEMICOLON: ;
RETURN: return
INT: 0
SEMICOLON: ;
R_BRACE: }
TYPE_VOID: void
NAME: infixToPostfix
L_BRACKET: (
CONSTANT: const
TYPE_CHAR: char
MULTIPLY: *
NAME: infix
COMMA: ,
TYPE_CHAR: char
MULTIPLY: *
NAME: postfix
R_BRACKET: )
L_BRACE: {
NAME: CharStack
NAME: opStack
SEMICOLON: ;
NAME: initCharStack
L_BRACKET: (
NAME: opStack
R_BRACKET: )
SEMICOLON: ;
TYPE_INT: int
NAME: j
ASSIGN: =
INT: 0
SEMICOLON: ;
FOR: for
L_BRACKET: (
TYPE_INT: int
NAME: i
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: i
LESS: <
NAME: strlen
L_BRACKET: (
NAME: infix
R_BRACKET: )
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: i
R_BRACKET: )
L_BRACE: {
TYPE_CHAR: char
NAME: token
ASSIGN: =
NAME: infix
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
SEMICOLON: ;
IF: if
L_BRACKET: (
NAME: isspace
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: continue
SEMICOLON: ;
R_BRACE: }
IF: if
L_BRACKET: (
NAME: isdigit
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
WHILE: while
L_BRACKET: (
NAME: i
LESS: <
NAME: strlen
L_BRACKET: (
NAME: infix
R_BRACKET: )
DOUBLE_AND: &&
NAME: isdigit
L_BRACKET: (
NAME: infix
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: infix
L_SQUARE_BRACKET: [
NAME: i
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
SEMICOLON: ;
R_BRACE: }
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
CHAR: ' '
SEMICOLON: ;
DOUBLE_MINUS: --
NAME: i
SEMICOLON: ;
R_BRACE: }
ELSE: else
IF: if
L_BRACKET: (
NAME: token
EQUAL: ==
CHAR: '('
R_BRACKET: )
L_BRACE: {
NAME: pushChar
L_BRACKET: (
NAME: opStack
COMMA: ,
NAME: token
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
ELSE: else
IF: if
L_BRACKET: (
NAME: token
EQUAL: ==
CHAR: ')'
R_BRACKET: )
L_BRACE: {
WHILE: while
L_BRACKET: (
NAME: opStack
DOT: .
NAME: top
NOT_EQUAL: !=
MINUS: -
INT: 1
DOUBLE_AND: &&
NAME: peekChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
NOT_EQUAL: !=
CHAR: '('
R_BRACKET: )
L_BRACE: {
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: popChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
SEMICOLON: ;
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
CHAR: ' '
SEMICOLON: ;
R_BRACE: }
NAME: popChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
ELSE: else
IF: if
L_BRACKET: (
NAME: isOperator
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
WHILE: while
L_BRACKET: (
NAME: opStack
DOT: .
NAME: top
NOT_EQUAL: !=
MINUS: -
INT: 1
DOUBLE_AND: &&
NAME: precedence
L_BRACKET: (
NAME: peekChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
R_BRACKET: )
GEQ: >=
NAME: precedence
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: popChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
SEMICOLON: ;
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
CHAR: ' '
SEMICOLON: ;
R_BRACE: }
NAME: pushChar
L_BRACKET: (
NAME: opStack
COMMA: ,
NAME: token
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
WHILE: while
L_BRACKET: (
NAME: opStack
DOT: .
NAME: top
NOT_EQUAL: !=
MINUS: -
INT: 1
R_BRACKET: )
L_BRACE: {
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
NAME: popChar
L_BRACKET: (
NAME: opStack
R_BRACKET: )
SEMICOLON: ;
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
DOUBLE_PLUS: ++
R_SQUARE_BRACKET: ]
ASSIGN: =
CHAR: ' '
SEMICOLON: ;
R_BRACE: }
NAME: postfix
L_SQUARE_BRACKET: [
NAME: j
R_SQUARE_BRACKET: ]
ASSIGN: =
CHAR: '\0'
SEMICOLON: ;
R_BRACE: }
TYPE_INT: int
NAME: evaluatePostfix
L_BRACKET: (
CONSTANT: const
TYPE_CHAR: char
MULTIPLY: *
NAME: postfix
R_BRACKET: )
L_BRACE: {
NAME: IntStack
NAME: valStack
SEMICOLON: ;
NAME: initIntStack
L_BRACKET: (
NAME: valStack
R_BRACKET: )
SEMICOLON: ;
FOR: for
L_BRACKET: (
TYPE_INT: int
NAME: i
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: i
LESS: <
NAME: strlen
L_BRACKET: (
NAME: postfix
R_BRACKET: )
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: i
R_BRACKET: )
L_BRACE: {
TYPE_CHAR: char
NAME: token
ASSIGN: =
NAME: postfix
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
SEMICOLON: ;
IF: if
L_BRACKET: (
NAME: isspace
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: continue
SEMICOLON: ;
R_BRACE: }
IF: if
L_BRACKET: (
NAME: isdigit
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
TYPE_INT: int
NAME: value
ASSIGN: =
INT: 0
SEMICOLON: ;
WHILE: while
L_BRACKET: (
NAME: i
LESS: <
NAME: strlen
L_BRACKET: (
NAME: postfix
R_BRACKET: )
DOUBLE_AND: &&
NAME: isdigit
L_BRACKET: (
NAME: postfix
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
NAME: value
ASSIGN: =
NAME: value
MULTIPLY: *
INT: 10
PLUS: +
L_BRACKET: (
NAME: postfix
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
MINUS: -
CHAR: '0'
R_BRACKET: )
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: i
SEMICOLON: ;
R_BRACE: }
NAME: pushInt
L_BRACKET: (
NAME: valStack
COMMA: ,
NAME: value
R_BRACKET: )
SEMICOLON: ;
DOUBLE_MINUS: --
NAME: i
SEMICOLON: ;
R_BRACE: }
ELSE: else
IF: if
L_BRACKET: (
NAME: isOperator
L_BRACKET: (
NAME: token
R_BRACKET: )
R_BRACKET: )
L_BRACE: {
TYPE_INT: int
NAME: right
ASSIGN: =
NAME: popInt
L_BRACKET: (
NAME: valStack
R_BRACKET: )
SEMICOLON: ;
TYPE_INT: int
NAME: left
ASSIGN: =
NAME: popInt
L_BRACKET: (
NAME: valStack
R_BRACKET: )
SEMICOLON: ;
NAME: switch
L_BRACKET: (
NAME: token
R_BRACKET: )
L_BRACE: {
NAME: case
CHAR: '+'
COLON: :
NAME: pushInt
L_BRACKET: (
NAME: valStack
COMMA: ,
NAME: left
PLUS: +
NAME: right
R_BRACKET: )
SEMICOLON: ;
NAME: break
SEMICOLON: ;
NAME: case
CHAR: '-'
COLON: :
NAME: pushInt
L_BRACKET: (
NAME: valStack
COMMA: ,
NAME: left
MINUS: -
NAME: right
R_BRACKET: )
SEMICOLON: ;
NAME: break
SEMICOLON: ;
NAME: case
CHAR: '*'
COLON: :
NAME: pushInt
L_BRACKET: (
NAME: valStack
COMMA: ,
NAME: left
MULTIPLY: *
NAME: right
R_BRACKET: )
SEMICOLON: ;
NAME: break
SEMICOLON: ;
NAME: case
CHAR: '/'
COLON: :
NAME: pushInt
L_BRACKET: (
NAME: valStack
COMMA: ,
NAME: left
DIVIDE: /
NAME: right
R_BRACKET: )
SEMICOLON: ;
NAME: break
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
R_BRACE: }
RETURN: return
NAME: popInt
L_BRACKET: (
NAME: valStack
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
TYPE_INT: int
NAME: main
L_BRACKET: (
R_BRACKET: )
L_BRACE: {
CONSTANT: const
TYPE_CHAR: char
NAME: expression
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
ASSIGN: =
STR: "1+(-5-22)*4/(2+1)"
SEMICOLON: ;
TYPE_CHAR: char
NAME: postfix
L_SQUARE_BRACKET: [
NAME: MAX
R_SQUARE_BRACKET: ]
SEMICOLON: ;
NAME: infixToPostfix
L_BRACKET: (
NAME: expression
COMMA: ,
NAME: postfix
R_BRACKET: )
SEMICOLON: ;
TYPE_INT: int
NAME: result
ASSIGN: =
NAME: evaluatePostfix
L_BRACKET: (
NAME: postfix
R_BRACKET: )
SEMICOLON: ;
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "The result of the expression is: "
SHIFT_LEFT: <<
NAME: result
SHIFT_LEFT: <<
NAME: std
DOUBLE_COLON: ::
NAME: endl
SEMICOLON: ;
RETURN: return
INT: 0
SEMICOLON: ;
R_BRACE: }
