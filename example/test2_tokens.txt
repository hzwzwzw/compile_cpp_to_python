INCLUDE: #include
LESS: <
NAME: iostream
GREATER: >
NAME: void
NAME: swap
L_BRACKET: (
NAME: int
AND: &
NAME: a
COMMA: ,
NAME: int
AND: &
NAME: b
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: temp
ASSIGN: =
NAME: a
SEMICOLON: ;
NAME: a
ASSIGN: =
NAME: b
SEMICOLON: ;
NAME: b
ASSIGN: =
NAME: temp
SEMICOLON: ;
R_BRACE: }
NAME: int
NAME: partition
L_BRACKET: (
NAME: int
NAME: arr
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
COMMA: ,
NAME: int
NAME: low
COMMA: ,
NAME: int
NAME: high
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: pivot
ASSIGN: =
NAME: arr
L_SQUARE_BRACKET: [
NAME: high
R_SQUARE_BRACKET: ]
SEMICOLON: ;
NAME: int
NAME: i
ASSIGN: =
L_BRACKET: (
NAME: low
MINUS: -
INT: 1
R_BRACKET: )
SEMICOLON: ;
NAME: for
L_BRACKET: (
NAME: int
NAME: j
ASSIGN: =
NAME: low
SEMICOLON: ;
NAME: j
LEQ: <=
NAME: high
MINUS: -
INT: 1
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: j
R_BRACKET: )
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: arr
L_SQUARE_BRACKET: [
NAME: j
R_SQUARE_BRACKET: ]
LEQ: <=
NAME: pivot
R_BRACKET: )
L_BRACE: {
DOUBLE_PLUS: ++
NAME: i
SEMICOLON: ;
NAME: swap
L_BRACKET: (
NAME: arr
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
COMMA: ,
NAME: arr
L_SQUARE_BRACKET: [
NAME: j
R_SQUARE_BRACKET: ]
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
NAME: swap
L_BRACKET: (
NAME: arr
L_SQUARE_BRACKET: [
NAME: i
PLUS: +
INT: 1
R_SQUARE_BRACKET: ]
COMMA: ,
NAME: arr
L_SQUARE_BRACKET: [
NAME: high
R_SQUARE_BRACKET: ]
R_BRACKET: )
SEMICOLON: ;
NAME: return
L_BRACKET: (
NAME: i
PLUS: +
INT: 1
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
NAME: void
NAME: quickSort
L_BRACKET: (
NAME: int
NAME: arr
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
COMMA: ,
NAME: int
NAME: low
COMMA: ,
NAME: int
NAME: high
R_BRACKET: )
L_BRACE: {
NAME: if
L_BRACKET: (
NAME: low
LESS: <
NAME: high
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: pi
ASSIGN: =
NAME: partition
L_BRACKET: (
NAME: arr
COMMA: ,
NAME: low
COMMA: ,
NAME: high
R_BRACKET: )
SEMICOLON: ;
NAME: quickSort
L_BRACKET: (
NAME: arr
COMMA: ,
NAME: low
COMMA: ,
NAME: pi
MINUS: -
INT: 1
R_BRACKET: )
SEMICOLON: ;
NAME: quickSort
L_BRACKET: (
NAME: arr
COMMA: ,
NAME: pi
PLUS: +
INT: 1
COMMA: ,
NAME: high
R_BRACKET: )
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
NAME: void
NAME: printArray
L_BRACKET: (
NAME: int
NAME: arr
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
COMMA: ,
NAME: int
NAME: size
R_BRACKET: )
L_BRACE: {
NAME: for
L_BRACKET: (
NAME: int
NAME: i
ASSIGN: =
INT: 0
SEMICOLON: ;
NAME: i
LESS: <
NAME: size
SEMICOLON: ;
DOUBLE_PLUS: ++
NAME: i
R_BRACKET: )
L_BRACE: {
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
NAME: arr
L_SQUARE_BRACKET: [
NAME: i
R_SQUARE_BRACKET: ]
SHIFT_LEFT: <<
STR: " "
SEMICOLON: ;
R_BRACE: }
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
NAME: std
DOUBLE_COLON: ::
NAME: endl
SEMICOLON: ;
R_BRACE: }
NAME: int
NAME: main
L_BRACKET: (
R_BRACKET: )
L_BRACE: {
NAME: int
NAME: arr
L_SQUARE_BRACKET: [
R_SQUARE_BRACKET: ]
ASSIGN: =
L_BRACE: {
INT: 10
COMMA: ,
INT: 7
COMMA: ,
INT: 8
COMMA: ,
INT: 9
COMMA: ,
INT: 1
COMMA: ,
INT: 5
R_BRACE: }
SEMICOLON: ;
NAME: int
NAME: n
ASSIGN: =
NAME: sizeof
L_BRACKET: (
NAME: arr
R_BRACKET: )
DIVIDE: /
NAME: sizeof
L_BRACKET: (
NAME: arr
L_SQUARE_BRACKET: [
INT: 0
R_SQUARE_BRACKET: ]
R_BRACKET: )
SEMICOLON: ;
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "Original array: "
SEMICOLON: ;
NAME: printArray
L_BRACKET: (
NAME: arr
COMMA: ,
NAME: n
R_BRACKET: )
SEMICOLON: ;
NAME: quickSort
L_BRACKET: (
NAME: arr
COMMA: ,
INT: 0
COMMA: ,
NAME: n
MINUS: -
INT: 1
R_BRACKET: )
SEMICOLON: ;
NAME: std
DOUBLE_COLON: ::
NAME: cout
SHIFT_LEFT: <<
STR: "Sorted array: "
SEMICOLON: ;
NAME: printArray
L_BRACKET: (
NAME: arr
COMMA: ,
NAME: n
R_BRACKET: )
SEMICOLON: ;
NAME: return
INT: 0
SEMICOLON: ;
R_BRACE: }
